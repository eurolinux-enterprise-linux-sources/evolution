diff -up evolution-2.32.3/modules/calendar/e-cal-config-date-edit.c.dateedit-24hr-time-format evolution-2.32.3/modules/calendar/e-cal-config-date-edit.c
--- evolution-2.32.3/modules/calendar/e-cal-config-date-edit.c.dateedit-24hr-time-format	2011-03-29 20:38:48.000000000 +0200
+++ evolution-2.32.3/modules/calendar/e-cal-config-date-edit.c	2014-06-05 19:56:36.821832778 +0200
@@ -44,6 +44,10 @@ cal_config_date_edit_constructed (GObjec
 	e_binding_new (
 		shell_settings, "cal-week-start-day",
 		extensible, "week-start-day");
+
+	e_binding_new (
+		shell_settings, "cal-use-24-hour-format",
+		extensible, "use-24-hour-format");
 }
 
 static void
diff -up evolution-2.32.3/widgets/misc/e-dateedit.c.dateedit-24hr-time-format evolution-2.32.3/widgets/misc/e-dateedit.c
--- evolution-2.32.3/widgets/misc/e-dateedit.c.dateedit-24hr-time-format	2014-06-05 19:56:36.493832792 +0200
+++ evolution-2.32.3/widgets/misc/e-dateedit.c	2014-06-05 19:56:36.822832778 +0200
@@ -1572,6 +1572,39 @@ hide_date_popup			(EDateEdit	*dedit)
 	gdk_keyboard_ungrab (GDK_CURRENT_TIME);
 }
 
+/* some locales may not define am/pm equivalents for '%p',
+   thus force 24 hour format for these, otherwise the am/pm
+   time clashes */
+static gboolean
+date_edit_use_24_hour_format (gboolean use_24_hour_format)
+{
+	struct tm tmp_tm = { 0 };
+	gchar buffer[40];
+
+	if (use_24_hour_format)
+		return TRUE;
+
+	/* Fill the struct tm with some sane values. */
+	tmp_tm.tm_year = 2000;
+	tmp_tm.tm_mon = 0;
+	tmp_tm.tm_mday = 1;
+	tmp_tm.tm_sec  = 0;
+	tmp_tm.tm_isdst = 0;
+	tmp_tm.tm_hour = 1;
+	tmp_tm.tm_min  = 0;
+
+	if (e_utf8_strftime (buffer, sizeof (buffer), "%p", &tmp_tm) == 0)
+		return TRUE;
+
+	tmp_tm.tm_hour = 13;
+	tmp_tm.tm_min  = 0;
+
+	if (e_utf8_strftime (buffer, sizeof (buffer), "%p", &tmp_tm) == 0)
+		return TRUE;
+
+	return use_24_hour_format;
+}
+
 /* Clears the time popup and rebuilds it using the lower_hour, upper_hour
    and use_24_hour_format settings. */
 static void
@@ -1580,7 +1613,8 @@ rebuild_time_popup			(EDateEdit	*dedit)
 	EDateEditPrivate *priv;
 	GtkComboBox *combo;
 	gchar buffer[40];
-	struct tm tmp_tm;
+	gboolean use_24_hour_format;
+	struct tm tmp_tm = { 0 };
 	gint hour, min;
 
 	priv = dedit->priv;
@@ -1596,6 +1630,8 @@ rebuild_time_popup			(EDateEdit	*dedit)
 	tmp_tm.tm_sec  = 0;
 	tmp_tm.tm_isdst = 0;
 
+	use_24_hour_format = date_edit_use_24_hour_format (priv->use_24_hour_format);
+
 	for (hour = priv->lower_hour; hour <= priv->upper_hour; hour++) {
 
 		/* We don't want to display midnight at the end,
@@ -1610,24 +1646,14 @@ rebuild_time_popup			(EDateEdit	*dedit)
 			tmp_tm.tm_hour = hour;
 			tmp_tm.tm_min  = min;
 
-			if (priv->use_24_hour_format)
-				/* This is a strftime() format.
-				 * %H = hour (0-23), %M = minute. */
-				e_time_format_time (
-					&tmp_tm, 1, 0,
-					buffer, sizeof (buffer));
-			else
-				/* This is a strftime() format.
-				 * %I = hour (1-12), %M = minute,
-				 * %p = am/pm string. */
-				e_time_format_time (
-					&tmp_tm, 0, 0,
-					buffer, sizeof (buffer));
+			e_time_format_time (
+				&tmp_tm, use_24_hour_format, 0,
+				buffer, sizeof (buffer));
 
 			/* For 12-hour am/pm format, we want space padding,
 			 * not zero padding. This can be done with strftime's
 			 * %l, but it's a potentially unportable extension. */
-			if (!priv->use_24_hour_format && buffer[0] == '0')
+			if (!use_24_hour_format && buffer[0] == '0')
 				buffer[0] = ' ';
 
 			gtk_combo_box_append_text (combo, buffer);
@@ -1969,6 +1995,7 @@ e_date_edit_update_time_entry		(EDateEdi
 	} else {
 		GtkTreeModel *model;
 		GtkTreeIter iter;
+		gboolean use_24_hour_format;
 		gchar *b;
 
 		/* Set these to reasonable values just in case. */
@@ -1982,16 +2009,14 @@ e_date_edit_update_time_entry		(EDateEdi
 		tmp_tm.tm_sec = 0;
 		tmp_tm.tm_isdst = -1;
 
-		if (priv->use_24_hour_format)
-			/* This is a strftime() format. %H = hour (0-23), %M = minute. */
-			e_time_format_time (&tmp_tm, 1, 0, buffer, sizeof (buffer));
-		else
-			/* This is a strftime() format. %I = hour (1-12), %M = minute, %p = am/pm string. */
-			e_time_format_time (&tmp_tm, 0, 0, buffer, sizeof (buffer));
+		use_24_hour_format = date_edit_use_24_hour_format (priv->use_24_hour_format);
+
+		e_time_format_time (
+			&tmp_tm, use_24_hour_format, 0, buffer, sizeof (buffer));
 
 		/* For 12-hour am/pm format, we want space padding, not zero padding. This
 		 * can be done with strftime's %l, but it's a potentially unportable extension. */
-		if (!priv->use_24_hour_format && buffer[0] == '0')
+		if (!use_24_hour_format && buffer[0] == '0')
 			buffer[0] = ' ';
 
 		gtk_entry_set_text (GTK_ENTRY (child), buffer);
