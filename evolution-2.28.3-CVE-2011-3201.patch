diff -up evolution-2.28.3/composer/e-msg-composer.c.CVE-2011-3201 evolution-2.28.3/composer/e-msg-composer.c
--- evolution-2.28.3/composer/e-msg-composer.c.CVE-2011-3201	2013-01-07 12:37:12.985297642 -0500
+++ evolution-2.28.3/composer/e-msg-composer.c	2013-01-07 12:45:53.004807881 -0500
@@ -3095,6 +3095,70 @@ add_recipients (GList *list, const gchar
 	return list;
 }
 
+static const gchar *blacklist[] = { ".", "etc", ".." };
+
+static gboolean
+file_is_blacklisted (const gchar *argument)
+{
+	GFile *file;
+	gboolean blacklisted = FALSE;
+	guint ii, jj, n_parts;
+	gchar *filename;
+	gchar **parts;
+
+	/* The "attach" argument may be a URI or local path.  Normalize
+	 * it to a local path if we can.  We only blacklist local files. */
+	file = g_file_new_for_commandline_arg (argument);
+	filename = g_file_get_path (file);
+	g_object_unref (file);
+
+	if (filename == NULL)
+		return FALSE;
+
+	parts = g_strsplit (filename, G_DIR_SEPARATOR_S, -1);
+	n_parts = g_strv_length (parts);
+
+	for (ii = 0; ii < G_N_ELEMENT (blacklist); ii++) {
+		for (jj = 0; jj < n_parts; jj++) {
+			if (g_str_has_prefix (parts[jj], blacklist[ii])) {
+				blacklisted = TRUE;
+				break;
+			}
+		}
+	}
+
+	if (blacklisted) {
+		gchar *base_dir;
+
+		/* Don't blacklist files in trusted base directories. */
+		if (g_str_has_prefix (filename, g_get_user_data_dir ()))
+			blacklisted = FALSE;
+		if (g_str_has_prefix (filename, g_get_user_cache_dir ()))
+			blacklisted = FALSE;
+		if (g_str_has_prefix (filename, g_get_user_config_dir ()))
+			blacklisted = FALSE;
+
+		/* Apparently KDE still uses ~/.kde heavily, and some
+		 * distributions use ~/.kde4 to distinguish KDE4 data
+		 * from KDE3 data.  Trust these directories as well. */
+
+		base_dir = g_build_filename (g_get_home_dir (), ".kde", NULL);
+		if (g_str_has_prefix (filename, base_dir))
+			blacklisted = FALSE;
+		g_free (base_dir);
+
+		base_dir = g_build_filename (g_get_home_dir (), ".kde4", NULL);
+		if (g_str_has_prefix (filename, base_dir))
+			blacklisted = FALSE;
+		g_free (base_dir);
+	}
+
+	g_strfreev (parts);
+	g_free (filename);
+
+	return blacklisted;
+}
+
 static void
 handle_mailto (EMsgComposer *composer, const gchar *mailto)
 {
@@ -3183,18 +3247,24 @@ handle_mailto (EMsgComposer *composer, c
 				}
 			} else if (!g_ascii_strcasecmp (header, "attach") ||
 				   !g_ascii_strcasecmp (header, "attachment")) {
-				EAttachment *attachment;
-
 				camel_url_decode (content);
-				if (g_ascii_strncasecmp (content, "file:", 5) == 0)
-					attachment = e_attachment_new_for_uri (content);
-				else
-					attachment = e_attachment_new_for_path (content);
-				e_attachment_store_add_attachment (store, attachment);
-				e_attachment_load_async (
-					attachment, (GAsyncReadyCallback)
-					e_attachment_load_handle_error, composer);
-				g_object_unref (attachment);
+				if (file_is_blacklisted (content)) {
+					g_warning (
+						"Skipping suspicious "
+						"attachment: %s", content);
+				} else {
+					EAttachment *attachment;
+
+					if (g_ascii_strncasecmp (content, "file:", 5) == 0)
+						attachment = e_attachment_new_for_uri (content);
+					else
+						attachment = e_attachment_new_for_path (content);
+					e_attachment_store_add_attachment (store, attachment);
+					e_attachment_load_async (
+						attachment, (GAsyncReadyCallback)
+						e_attachment_load_handle_error, composer);
+					g_object_unref (attachment);
+				}
 			} else if (!g_ascii_strcasecmp (header, "from")) {
 				/* Ignore */
 			} else if (!g_ascii_strcasecmp (header, "reply-to")) {
